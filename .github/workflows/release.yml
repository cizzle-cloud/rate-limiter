name: Release

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.read-version.outputs.version }}
      ignore-bump: ${{ steps.bump-check.outputs.ignore-bump }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine version bump
        run: |
          ./bump-version.sh

      - name: Check if version bump should be ignored
        id: bump-check
        run: |
          if [ -f .bump-ignore ]; then
            echo "ignore-bump=true" >> $GITHUB_OUTPUT
          else
            echo "ignore-bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.bump-check.outputs.ignore-bump == 'false'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit and push changes
        if: steps.bump-check.outputs.ignore-bump == 'false'
        run: |
          git checkout release
          git add VERSION
          git add CHANGELOG.md
          git commit -m "update VERSION and CHANGELOG.md"
          git push origin ${{ github.head_ref }}

      - name: Read version
        id: read-version
        if: steps.bump-check.outputs.ignore-bump == 'false'
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

  tag:
    needs: [prepare-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.setup.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Create and push tag
        run: |
          git checkout main
          git pull origin main
          TAG="v${{ env.VERSION }}"
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG
          echo "Created and pushed tag $TAG"

      - name: Merge release into develop
        run: |
          # Check if release branch exists
          if git ls-remote --heads origin release | grep release; then
            git checkout origin/develop -b develop
            git merge --no-ff origin/release -m "Merge release branch back into develop"
            git push origin develop
            echo "Successfully merged release branch into develop"
            
            git push origin --delete release
          else
            echo "Release branch does not exist, skipping merge step"
          fi
